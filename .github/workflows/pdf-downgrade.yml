name: PDF → PDF 1.4 (multi-engine & logs)

on:
  workflow_dispatch:
    inputs:
      path:
        description: 'Opcjonalna ścieżka do jednego PDF-a (np. input/plik.pdf). Pusta = skanuj input/ potem całe repo.'
        required: false
        default: ''
  push:
    paths:
      - "input/**.pdf"
      - "input/**.PDF"

jobs:
  convert:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Pokaż drzewo repo i PDF-y
        run: |
          echo "== CWD =="; pwd
          echo "== Drzewo =="; ls -lahR || true
          echo "== Szukam PDF-ów w input/ =="; find input -type f \( -iname "*.pdf" -o -iname "*.PDF" \) -print || true

      - name: Zainstaluj narzędzia
        run: |
          sudo apt-get update
          sudo apt-get install -y ghostscript qpdf mupdf-tools poppler-utils
          gs -v || true
          qpdf --version || true
          mutool -v || true
          pdftocairo -v || true

      - name: Konwersja (GS → QPDF+GS → MuPDF+GS → Raster)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p output logs

          # Zbierz pliki do obróbki
          declare -a files=()
          if [[ -n "${{ github.event.inputs.path }}" ]]; then
            files=( "${{ github.event.inputs.path }}" )
          else
            mapfile -t files < <(find input -type f \( -iname "*.pdf" -o -iname "*.PDF" \) -print 2>/dev/null || true)
            if (( ${#files[@]} == 0 )); then
              echo "Brak w input/. Skanuję całe repo (bez .git oraz output/)..."
              mapfile -t files < <(find . -type f \( -iname "*.pdf" -o -iname "*.PDF" \) ! -path "./.git/*" ! -path "./output/*" -print)
            fi
          fi

          if (( ${#files[@]} == 0 )); then
            echo "ERROR: Nie znaleziono żadnych PDF-ów." ; exit 66
          fi

          fail_count=0

          for f in "${files[@]}"; do
            base="$(basename "$f")"; stem="${base%.*}"
            out="output/${stem}_PDF14.pdf"
            log="logs/${stem}.log"
            echo "=== Przetwarzam: $f ===" | tee "$log"

            # 1) Ghostscript minimalny
            if gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dNOPAUSE -dBATCH \
                  -sOutputFile="$out" "$f" >>"$log" 2>&1; then
              echo "OK: Ghostscript (minimalny)" | tee -a "$log"
              continue
            fi

            # 2) qpdf naprawa → Ghostscript
            tmp1="$(mktemp --suffix=.pdf)"
            if qpdf --linearize "$f" "$tmp1" >>"$log" 2>&1 && \
               gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dNOPAUSE -dBATCH \
                  -sOutputFile="$out" "$tmp1" >>"$log" 2>&1; then
              echo "OK: qpdf + Ghostscript" | tee -a "$log"
              rm -f "$tmp1"
              continue
            fi
            rm -f "$tmp1" || true

            # 3) MuPDF (mutool clean) → Ghostscript
            tmp2="$(mktemp --suffix=.pdf)"
            if mutool clean -gg -d "$f" "$tmp2" >>"$log" 2>&1 && \
               gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dNOPAUSE -dBATCH \
                  -sOutputFile="$out" "$tmp2" >>"$log" 2>&1; then
              echo "OK: MuPDF + Ghostscript" | tee -a "$log"
              rm -f "$tmp2"
              continue
            fi
            rm -f "$tmp2" || true

            # 4) Fallback rastrowy (ostatnia deska ratunku)
            out_raster="output/${stem}_RASTER_PDF14.pdf"
            if pdftocairo -pdf -r 300 "$f" "output/${stem}_RASTER" >>"$log" 2>&1; then
              mv "output/${stem}_RASTER.pdf" "$out_raster"
              echo "OK: Raster fallback (pdftocairo 300 DPI)" | tee -a "$log"
              continue
            fi

            echo "FAIL: wszystkie metody zawiodły dla $f (patrz $log)" | tee -a "$log"
            ((fail_count++)) || true
          done

          if (( fail_count > 0 )); then
            echo "Uwaga: niektóre pliki nie przeszły ($fail_count). Sprawdź folder logs/."
            exit 255
          fi

      - name: Lista wyników
        run: |
          echo "== output =="; ls -lah output || true
          echo "== logs =="; ls -lah logs || true

      - name: Artefakty (PDF-y + logi)
        uses: actions/upload-artifact@v4
        with:
          name: converted-pdfs-and-logs
          path: |
            output
            logs
          if-no-files-found: warn
